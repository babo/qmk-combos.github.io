{
  
  "1": {
    "title": "Combo Docs",
    "content": "Parts of a Combo . Using this library with combos you have two functions avalible for use SUBS and COMB. They stand for Substitute and Combo respectfully. Lets take a look at a dictionary . germ-vim-helpers.def . COMB() . The COMB() Macro is responsible for take in a combo and outputting a single keypress!. The general form is COMB(ident, keycodeToEmit, keySequence...) So Line 3 in the above dictionary takes WE and outputs Escape. . Ident:A unique identifier, something descriptive works, but asdfffdsadf also works. . keycodeToEmit:A keycode from the QMK Keycode list. This includes Mouse, Shifted and Quantum keycodes. . keySequence: a series of keycodes to be pressed before triggering this output. . SUBS() . Subs is a very powerful macro and is used for all other sequences. For multicharacter, shifted or well anything else you’re going to use SUBS. At it’s core it relys on QMKs SEND_STRING() The general form is similar to COMBs, SUBS(ident, sendStringArg, keySequence...). So Line 10 outputs the start of the Interjection copypasta. . Ident:A unique identifier, something descriptive works, but asdfffdsadf also works. . sendStringArg: The macro or string to be send by SEND_STRING() . keySequence: a series of keycodes to be pressed before triggering this output. . Advanced SEND_STRINGing . The strings passed to SUBS() can be much more then dumb output! For sending control sequences, modifiers and other abritrary keycodes take a look at the QMK SEND_STRING docs. Just be aware that this library handles the hooking and storage, just pass the string to SUBS()! . Take a few minutes to play around and make a few of your own and add them to your combos.def! Next up, managing dictionaries. . Managing Dicts .",
    "url": "http://localhost:4000/docs/docs/combos/",
    "relUrl": "/docs/docs/combos/"
  }
  ,"2": {
    "title": "Home",
    "content": "Combos on Steroids, for your mechanical keyboard . Combos are a powerful feature, from Alt-Tab on the home row to your favourite snippets almost anything can be done with a programmable keyboard Here you’ll find a collection of user dictionaries, that can be easily layered into your own QMK keymaps taking your ergonomics to a whole new level. . Download some of the avalible dictionaries or start modifying your own! . Install Now Read the docs Learn more . . Some user dictionaries . Name Description Author Link . vim-helpers | Vim-focused combos for easy access to Esc/: and others | germ | view | . View All Dicts .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"3": {
    "title": "Installation Guide",
    "content": "Install . Lets get this party started, you’ll need a QMK Powered Keyboard, a working QMK build environment. and your own keymap. Once you have those set up, come on back. If you’re using a newer g Heavy Inudstries/ board these may be enabled already! . Still here? Awesome. Let’s edit your setup. Pop open your keymaps rules.mk and add this somewhere. If there isn’t a rules.mk file in your keymap, create it! . VPATH += keyboards/gboards/ COMBO_ENABLE=yes . This line lets the compiler know where to look for combos. Now make a empty file named combos.def in your keymap directory. That’s it! . Your first combo . In combos.def add this statement. SUBS(helloWorld, &quot;QMK is pretty rad eh?&quot;, KC_H, KC_J) . Save it, compile your keymap and flash it. If you’ve done it correctly pressing H and J at the same time will output the text. Congrats! . If you’re not enabling the Chording Engine, head on over to . Creating Combos . Chording . If you wish to use the onboard chording engine, a little bit more tweaking needs to be done. Until I remove this todo, take a look at Ginny in this branch works. . Here’s a short list . – Setting up rules.mk – Creating dicts.def – Choosing C_SIZE – Creating ENGINE_CONFIG . // TODO: Describe the build process .",
    "url": "http://localhost:4000/docs/install/",
    "relUrl": "/docs/install/"
  }
  
}